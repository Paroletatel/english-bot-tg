require('dotenv').config()

const yandexToken = process.env.YANDEX_TOKEN
const axios = require("axios");
const path = require("path");
const fsExists = require("fs.promises.exists");
const fs = require("fs");

const directory = path.dirname(require.main.filename)
// const text = '**Мы** **открылись**!\n' +
// //     'Магазин Новоалександровского мясокомбината в **Вашем** районе.\n' +
// //     'Это всегда **свежее** мясо, **колбасы** и **мясные** **деликатесы**, а так же **продукция** из **индейки**.\n' +
// //     '**Всё** **напрямую** от производителя. Мы **сами** производим, доставляем и сами следим за свежестью **мяса** и наших продуктов.\n' +
// //     'Ждем **Вас** в нашем магазине по адресу улица Кирова 47. Остановка торговый центр Витта на территории рынка.\n' +
// //     'Вас ждёт **деггустация** нашей продукции и приятные цены как на **свежее** мясо, **так** и на готовую продукцию.\n' +
// //     'Продукция Новоалександровского мясокомбината! Чем натуральнее тем вкуснее.\n' +
// //     'Теперь и для **Вас** доступна **наша** продукция'
const text = 'На видео предоставлены ознакомительные материалы нашей работы.\n' +
    'К нам обратился поставщик металлообрабатывающих станков с запросом оптимизации и автоматизации процессов при помощи искусственного интеллекта.\n' +
    'Внедрение оборудования в производствевенную линию - не самая простая задача, и требует больших аналитических ресурсов.\n' +
    'Говоря простыми словами - подбор станка для производства - ещё та головная боль.\n' +
    'На в ходе глубокого аудита командой Нэйро Лоджик Технолоджи была выявлена точка наиболее эффективного внедрения искусственного интеллекта в процессы заказчика, а именно - анализ технического задания.\n' +
    'Каждый запрос от потенциального клиента для нашего заказчика содержит под собой техническое задание.\n' +
    'Техническое задание может состоять из десятков листов А4 с описаниями мельчайших деталей изделия, например градус угла шестерёнок или ширина ступицы от двигателя самолёта. Может представлять из себя набор тысяч характеристик какого-то абстрактного станка, исходя из которых нужно подобрать к предложению конкретный.\n' +
    'Подбор осложняется не только колоссальным количеством параметров тех задания, но и количеством предлагаемых станков, коих в ассортименте нашего заказчика более пятидесяти. Кроме того станки имеют большой ряд настроек и модификаций, не говоря уже о постоянных обновлениях в каталогах производителей.\n' +
    'Могут понадобиться сотни человеко-часов аналитической работы для принятия наиболее экономически выгодного решения по внедрению оборудования.\n' +
    'На момент проведения аудита командой разработки *nlt* было установлено:\n' +
    'аналитических мощностей команды квалифицированных технологов нашего заказчика хватает на обработку не более пяти технических заданий в день, вместе с тем на очереди в столе более сотни.\n' +
    'На основании аудита командой нейро лоджик технолоджи было формализовано уникальное решение по внедрению искусствннного интеллекта в процесс анализа технического задания.\n' +
    'Командой разработки ЭнЭлТи был написан сервис, позволяющий искусственному интеллекту анализировать и интерпретировать тысячи тех заданий, а вместе с тем и тысячи запросов клиентов нашего заказчика в сутки.\n' +
    'Это стало возможно благодаря четко-выстраенной математическо-логической модели обработки и структурирования тех задания, а также алгоритмизации работы искусственного интеллекта.\n' +
    'Наш сервис не просто позволяет узнать  выбор какого станка является наиболее экономически выгодным решением, но кроме того получить полную логику решения в понятной форме. \n' +
    'Вместе с тем, автоматизация анализа технического задания находится в рамках решения задачи внедрения искусственного интеллекта в процессы заказчика и помимо прямой пользы является фундаментом построения алгоритмов оптимизации и других ключевых процессов заказчика.'



;(async () => {
    await getVoice(text)
})();




async function getSpeechFromText(text) {

    const ssmlText = await useSSML(text)

    const url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
    try {
        const res = await axios.get(url, {
            headers: {
                Authorization: `Api-Key ${yandexToken}`,
            },
            params: {
                // text: text,
                lang: 'ru-RU',
                format: 'mp3',
                voice: 'alena',
                emotion: 'neutral',
                speed: 1.1,
                ssml: ssmlText,
                // tts: text
            },
            responseType: 'stream'
        })

        const stream = res.data

        return Promise.resolve(stream)
    } catch (e) {
        console.log(e)
        return Promise.reject(e)
    }
}

async function useSSML(text){
    const parts = text.split(/[!.?]/gm)
    return (
        `<speak>
            <s>
                ${parts.filter(item => item !== '').join('</s><s>')}
            </s>
        </speak>`
    )
}


async function stream2buffer(stream) {

    return new Promise((resolve, reject) => {

        const _buf = [];

        stream.on("data", (chunk) => _buf.push(chunk));
        stream.on("end", () => resolve(Buffer.concat(_buf)));
        stream.on("error", (err) => reject(err));
    });
}

async function getVoice(text){
    const wd = path.join(directory, 'voice')
    const file = path.join(wd, `/manual`)

    if(!await fsExists(file)){
        await fs.promises.mkdir(file)
        const stream = await getSpeechFromText(text)
        const buffer = await stream2buffer(stream)

        await fs.promises.writeFile(path.join(file,'voice.mp3'), buffer)
        return buffer
    }else{
        const buffer = await fs.promises.readFile(path.join(file,'voice.mp3'))
        return buffer
    }
}